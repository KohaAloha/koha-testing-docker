#!/usr/bin/perl

use Modern::Perl;

use File::Basename;
use File::Slurp qw(read_file);
use Term::ANSIColor qw(colored);

$ENV{LOG} = "test";

my $nb_errors = 0;
my @compiled_css = ( "staff-global", "opac" );
my $modify_files;

for my $filepath (`git diff --cached --name-only`) {
    chomp $filepath;
    next if not -f $filepath;

    my @file_infos = fileparse( $filepath, qr/\.[^.]*/ );

    if ( grep( $file_infos[0], @compiled_css ) && $file_infos[2] eq ".css" ) {
        say colored( "You don't want to commit $filepath", 'red' );
        $nb_errors++;
    }

    if ( $file_infos[2] =~ /^.pl|^.pm$/ ) {
        system( qq{
            docker exec koha_koha_1 /usr/bin/perl -wc /kohadevbox/koha/$filepath 2>&1 | grep -Pv "Subroutine \\w+ redefined at "
        } ) == 0
          or say "\n" and $nb_errors++;
    }
    elsif ( $file_infos[2] =~ /^.tt$/ ) {

        #TODO
    }
    elsif ( $file_infos[2] =~ /^.js$/ ) {

        #TODO
    }
    elsif ( $file_infos[2] =~ /^\.vue$/ ) {
        $modify_files->{$filepath} = qq{yarn --silent run prettier --trailing-comma es5 --semi false --arrow-parens avoid --write $filepath};
    }
}

if ( $modify_files ) {
    say colored( "Some files need to be modified", "yellow" );

    # Prevent to reach a stash pop that will fail later
    # Do not modify files if they have changes that are not added to the git index yet (so part of the current commi)
    my @local_changes = map{ chomp; $_ } qx(git diff --name-only);
    my @local_changes_on_files_to_modify = intersect(\@local_changes, [keys %$modify_files]);
    if ( @local_changes_on_files_to_modify ) {
        say colored( "Cannot modify files with changes not added to the index yet", "red" );
        exit 1;
    }

    # If there are local changes we stash, just in case
    # It should not be needed, we have the previous check
    if ( @local_changes ) {
        say colored( "Stashing local changes", "green" );
        qx{git stash push -m "pre-commit" --keep-index --quiet};
    }

    # Do modify the files
    while ( my ( $filepath, $cmd ) = each %$modify_files ) {
        qx($cmd);
    }

    if ( @local_changes ) {
        say colored( "Unstashing local changes", "green" );
        my $stash_applied_error = system(q[git stash apply stash^{/pre-commit} --quiet]);
        # This stash pop should not fail, isn't it?
        if ( $stash_applied_error ) {
            say colored( "Cannot unstash properly", "red" );
            say colored( "Something bad happens, this was not expected!", "red" );
            exit 1;
        }
    }

    # Add changes to the commit
    my $git_add_cmd = q{git add } . join(' ', keys %$modify_files);
    qx{$git_add_cmd};
}

my $filepath;
for my $l ( split '\n', `git diff-index -p -M --cached HEAD` ) {
    if ( $l =~ /^diff --git a\/([^ ]*) .*$/ ) {
        $filepath = $1;
    }
    if ( $l =~ /^\+ *console.log/ ) {
        say colored( "$filepath contains console.log ($l)", 'red' );
        $nb_errors++;
    }
    elsif ( $l =~ /^\+ *warn Data::Dumper::Dumper / ) {
        say colored( "$filepath contains warn Data::Dumper::Dumper ($l)",
            'red' );
        $nb_errors++;
    }

    # This one could be uncommented when Koha will have the Logger module
    elsif ( $l =~ /^\+ *warn / ) {
        say "$filepath contains warn ($l)";
        $nb_errors++;
    }

    elsif( $l =~ /\+ *\t/) { # fail also if there is some space before the tab
        say colored( "$filepath contains a tab, must use 4 spaces ($l)",
            'red' );
        $nb_errors++;
    }

    elsif ( $l =~ m/^<<<<<<</ or $l =~ m/^>>>>>>>/ or $l =~ m/^=======/ ) {
        say colored( "$filepath contains $& ($l)", 'red' );
    }
}

if ($nb_errors) {
    say "\nAre you sure you want to commitÂ ?";
    say "You can commit with the --no-verify argument";
    exit 1;
}

say colored( "Success, pre-commit checks passed", 'green' );

exit 0;

sub intersect{
    my ( $a, $b ) = @_;
    my %e = map { $_ => undef } @$a;
    return grep { exists( $e{$_} ) } @$b;
}
